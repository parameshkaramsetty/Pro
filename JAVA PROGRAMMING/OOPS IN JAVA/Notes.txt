Class - named group of prop. and functions - starts with capital letters
to create our own data type - we use classes
ex : car - class => a blue print - but the value of the prop. changes
class - rule that exists w.r.t that - with diff values of prop. - logical  - it is in logical way - for rules
    human -> have some rules - two eyes , two legs , two hands 
        prop : skin color -> varies with human to human - rules
               black eys , short nails 
    value changes w.r.t to object to object

Class - it is a blue print with set of prop. (rules) and functions (methods) - it is a template  of an object 
        prop. changes 

        class - to make  a seperate  datatype
        classes helps to define  this particular datatype - with prop. and methods

Object - instance of that class - physical stuff reality - occupying space in memory
         instance

Human - template - logical 
babies are born - instance of human - physical

Car  => rule - it should have engine , four wheels ,seats - template => w.r.t to this diff. cars are made
diff. cars -> suzuki , audi , ferrari

Class - logical - template of a Object
Object - physical - instance of a class - occupies space in memory






syntax:
class Classname{
    int rno;
    String name;
    float[] marks = new float[5];
}

Object - State ( value of the data type )  , Identity ( where the value is stored ) , behaviour ( effect on the data type operations )
        Objects are stored in heap memory
        Reference variables are stored in the stack memory


How to create objects :

    we use template of class to create objects
    any object will have prop. w.r.t to the class

    classes are nothing but data type

    Classname variable_name = new Classname();

    using the . -> we access

    links the Reference variable with the object (instance variable)

    instance variable - variables inside the object

    Variable that defines the object -> reference variable



     to access particular prop. of class  -> refernce varible . instance variable
        S1.rno ;

    to create a class 

    class Student{
        int rno;
        String name;
        float marks;

    }
    
    inorder to create a object we need to use new keyword
    Student is a datatype
    Student s1 ; // declaraing a ref. variable to the object of class Student
    reference to the object of type Student

    Ref . => Stack memory

    we need to declare the object with a reference variable and then we need to use it to create instance variables by initializing it
    we need to initialize the ref. variable

    if we doesnot initialize it will give the default value as null -> for objects -> it will be null
    Object - default data type - NULL

    declaring - to create a reference 

    to create a Object - we need to use new keyword 
    s1 = new Student();

    new => dynamically allocates memory at run time and returns a ref. to it
    
    s1 -> reference variable 
        =>
        it dynamically allocates memory and returs a refernces variable to it
        this reference variable stored in s1 variable

    new - allocates memory at run time and returns a ref. 
          and reference is stored in the reference variable that is created while used in declaring the reference variable of Object

    reference variables are stored in stack memory 
    objects are stored in heap memory

    reference variable in stack points to the object in heap memory

    all class objects must be allocated dynamically

    DMA    => 
            Student s1 = new Student();
            LHS             RHS

            LHS => COMPILE TIME => CHECKS IF THERE IS ANY ERROR 
            RHS => RUN TIME -> PROGRAMMING RUNNING -> IN THAT TIME MEMORY WILL BE ALLOCATED WHEN PROGRAMMING IS RUNNING
    STATIC - COMPILE TIME AT THE TIME OF CHECKING 

    WE CANNOT ACCESS THE ADDRESS - IN JAVA 

    WHEN WE CREATE A OBJECT OF A CLASS - IT IS BEING INSTATIATED 

    TO INTIALIZE OBJECT :
    Student s1 = new Student();

    BY DEFAULT IT WILL GIVE YOU A RANDOM VALUE WHEN WE CREATE AN INITIALIZE THE OBJECT

    WE NEED TO INTIALIZE THE OBJECT OTHERWISE BY DEFAULT IT WILL HAVE A DEFAULT VALUE OF NULL -> WE CAN SEE IT IN ARRAY OF OBJECT WITH THE SAME CLASS

    FOR A SINGLE REF. VARIABLE -> IT WILL SHOW AN ERROR

    THE BY DEFAULT VALUE OF OBJECTS => NULL

    FOR PRIMITIVES IT VARIES 

    WE CAN ACCESS IT BY 
    s1.rno = 1;
    s1.name = "a";

    WHEN WE HAVE DEFAULT VALUES IN THE CLASS - IT WILL NOT CHANGE EVEN IF WE INITIALIZE IT AND CHANGE IT BY ACCESSING THE PROP. OF THE INSTANCE

    BY DEFAULT THE PROP. OF THE CLASS WILL HAVE DEFAULT VALUES UNLESS WE CHANGE IT BY ACCESSING IT BY CREATING INSTANCES OF THE CLASS

    WE CAN CHANGE IT IF THE VALUE IN THE CLASS IS DEFAULT OTHERWISE IT WILL PRINT THE DEFAULT VALUE

    WE CAN GIVE THE DEFAULT VALUE IF REQ. IN THE CLASS - ELSE IT WILL GIVE THE DATA TYPE OR OBJECT DEFAULT VALUE
    WE CAN ALSO CHANGE THE VALUE OF REF_VAR.PROP. BY DECLARING IT ELSE IT GIVES THE DEFAULT VALUE
    IT CHECKS WHETHER THE PROP. EXISTS IN THE OBJECT   AND  THE TEMPLATE IS BEING CHANGED OR NOT ELSE IT GIVES THE DEFAULT 

    FIRST IT CHECKS IN OBJECT UNLESS WE CHANGE - IT GIVES DEFAULT VALUE
    WHEN WE ACCESS IT AND CHANGE - 
    S1.rno => it checks the rno. inside the s1 object whether there is any prop. named rno in the object and it checks the prop. is there or not in the object of the class  - and it prints 
    IF THE PROP. DOES NOT EXIST IN THE OBJECT CREATED THEN IT PRINTS THE DEFAULT VALUE

    SIMPLY :
     IT CHECKS THE OBJECT PROP. THAT IS CREATED BY THE CLASS
     IF IT HAS THE PROP. THEN OK
     ELSE ANY OF THE PROP. IS MISSING IT TAKES THE VALUE FROM THE CLASS

     EX :

     class Student {
        int rno;
        String name; // it is an object of string class - it has a default value of null 
     }
     // creating a class
     Student s = new Student();
     s.rno = 18;
     print(s.name) // it prints -> null 

     what happends -> here is 
     it checks the prop. of the object created whether it is there or not else it takes the prop. from the Class ( template ) [ it takes the default value ]

        it checks whether rno exists in the object created 
        else it takes the rno from the class where the object is created

    FIRST IT CHECKS FROM REF. VARIABLE PROP. IF IT IS NOT PRESENT IT GOES TO CLASS PROP.

    WE CANNOT USE OTHER PROP BY OUR OWN WHICH ARE NOT THERE IN THE CLASS - IT SHOWS AN ERROR - WHEN WE USE IF IT NOT PRESENT IN THE CLASS

    WE CANNOT ALLOCATE OR INITIALIZE ALL  VALUES OF THE OBJECT  EVERYTIME - FOR EACH AND EVERY OBJECT - IT BECOMES COMPLEX AND REPETITIVE IF IT HAS 100 TYPES IN THE CLASS
    SO WE USE CONSTRUCTOR 
    Student s = new Student();
    Student() => it is a CONSTRUCTOR - we use this since we have a problem to allocate values to the instance becomes REPETITIVE

    CONSTRUCTOR - DEFINES WHAT HAPPENS WHEN OBJECT IS BEING CREATED 
    WHEN OBJECT IS BEING CREATED  - VALUES ARE ALLOCATED TO THE TYPE THAT IS PRESENT IN THE CLASS
    WHEN OBJECT IS CREATED WE NEED TO INISTATIATE - WE CAN MAKE IT MANDATORY TO ASSIGN VALUES TO THE PROP. WHEN THE OBJECT IS CREATED - WITHOUT MAKING THE PROP. REPITITIVE - DO IT ONCE - TO ASSIGN THE VALUES OF THE OBJECT TO THE CLASS(FROM WHERE IT IS CREATED)

    CONSTRUCTOR :   
        Student s1 = new Student(we pass the values here)
        Student s1 ;
        s1 = new Student(1,'a');
                    // BINDING THE VALUES TO THE OBJECT

        CONSTRUCTOR IS A SPECIAL TYPE OF FUNCTION IN THE CLASS THAT RUNS WHEN AN OBJECT IS CREATED AND IT ALLOCATES VARIABLES WITH THE VALUES THAT ARE PASSED DURING THE CREATION OF OBJECT
        IT IS A FUNCTION THAT CREATES / INISTATIATE THE OBJECT 7

        DURING CALLING OF THE FUNCTION WE NEED TO BIND THESE ARGUMENTS - THE VALUES THAT WE WANT TO SEND - WITH THE OBJECT

        CONSTRUCTOR : no name required for the constructor - special type of function in class - we need to give the data type of the function 
        
        Student(){ // return type - type of object of the class - name not required 

        }

        student() => this is a by default constructor

        special type function - runs when object is created - allocates some variables

        by default - default constructor - no ARGUMENTS - every thing is empty
     
        Student s = new Student()

        During calling the function - we need to bind these arguments with the object

        CONSTRUCTOR IS CALLED WHEN A OBJECT IS CREATED

        THIS - IT REPLACES OBJECT REF.VARIABLE

        this.rno = 1; <==> s1.rno=1; => whenever a object is created then to instantiate the object we use this keyword as ref. varible - to assign the value to the prop. of the object

        Class is nothing but template - inorder to access the object inside the template we use this key word

        Inorder to access 


        class Student{
            int rno;
            String name;

            // we need a way to add the values to the above properties object by object 
            // we need to access to every object

    // THIS KEYWORD - REFERS TO THE PARTICULAR OBJECT THAT IS CREATED = USED TO ACCESS THE REF. VARIABLE IN THE OBJECT
        INORDER TO ACCESS THE OBJECT THAT IS INSIDE THE TEMPLATE WE USE THIS KEYWORD

        FOR EVERY OBJECT - VALUES ARE DIFFERENT 
        SO WE NEED TO ASSIGN THE VALUES TO THE PROP. OF EVERY OBJECT

        this -> it is replaced with the name of the reference variable that is created by the object
        this.rno = 1;  is same as s1.rno = 1;

        this refers - to the reference variable of the current instance 

        inorder to use same names / other names in the constructor as in the class - we use this key word - to refer to the reference variable of the instance that is created
        and to tell the prop. what the instance is using refers to the instance variable or the class - we use this

        INSTEAD OF SENDING PARAMETERS WE CAN ALSO SEND THE OBJECT THAT IS CREATED BEFORE TO REFER TO THE VALUE OF THE INSTANCE

        DEFAULT CONSTRUCTOR  - IT IS CREATED BY THE COMPILER - IF WE DOESNOT MENTION ANY CONSTRUCTOR FOR THE CLASS
        PARAMATERIZED CONSTRUCTOR - CONSTRUCTOR WITH PARAMETERS
        NON-PARAMETERIZED CONSTRUCTOR - CONSTRUCTOR WITHOUT ANY PARAMETERS

        WE CAN ALSO SEND OBJECT ALSO AS A PARAMETERS
        THIS REFERS TO REF. VARIABLE OF THE OBJECT THAT IS CREATED

        
                               



            Student(){
                this.rno = 1;
                this.name = 'alice;
            }
        }


















