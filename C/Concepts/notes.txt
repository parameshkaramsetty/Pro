C - DENNIS RITCHE

basic systax of c program
#include<stdio.h> -> must include header file
int main(){ --> main function
    printf("Hello"); -> print statement
    return 0; -> return statement based on the function
}

comments
single line - //
multi line - /* */

escape characters 
\n - for new line
\t - for tab space
\\ - for using \ once
\(" , ') - for using " ' .. - we use \" - for including in the print statement

variables
req: 
datatype
name 
value

type var_name assignment
dt a = 81;
int a = 81;
for printing these variables we use format specifiers / access specifiers 

for int - %d
for float - %f
for char - %c
we can change the value of the variables once it is declared but we should not declare it again to change the value

variable names must be unique
it should not start with numbers & does not contain special characters but it can start with _ 

variable - it is a container for storing the value
name - it is the name given to the variable

DATA TYPES
int  - 81 - 2 or 4 bytes - %d or %i
float - 81.0 - 4 bytes - %f
double - 81.00000000000000 - 8bytes - %lf
char - '81' - 1 byte - %c
for strings - %s

we can control the decimal values using - %.(val)f - where val is how many decimal places we need

type conversion - it is the process of converting a datatype to its higher or lower
2 TYPES
implict - automatic
explict - manual


// float variable is assigned with int value 
  // it outputs float value of the variable
  //int value is assigned with float value 
  // it outputs int value
  
  // the output is based on the datatype of the variable
  // the output is not based on the value of the variable 
  // it shows error when we use wrong format specifiers

  int to float
  float to int
  can be converted automatically and depends on the data type of the variable

  when float value is assigned to int var then it dispalys int value of the variable


for explicit conversion  we can use data type required in brackets (float) or we can convert one of the number to float data type

int/int - gives int value
int / float or float/int - gives float value
for getting float(exact) value in division  we need to use float value 
5/2 - 2.000
5/2.0 or 5.0/2 or (float)5/2  or 5/(float)2 - 2.500

we need to use data type in () when we are going to explicit conversion

constants - used by const key name
const <datatype> <var_name> = <value>; // this cannot be changed 
// we can store any kind of value here by declaring the datatype after the constant keyword
//const int a = 1;
const float pi = 3.14;

it is good practice to assign values at time of declaration

operators - operator is used with operands
we need to assign the value of the mathematical function that contains operator to a variable
int s = a + b;
unary operators - requires only one operand
binary operators - requires two operands
terenary operators  - requires more than two operands

arithmetic operators 

+ => to add 
- => to subtract 
* => to multiply 
/ => to divide 
% => gives remainder
++ => to increase value by 1 - 2 types pre and post
-- => to decrease value by 1 - 2 types pre and post


logical operators

&& - true when all are true
|| - true if one of them is true
!  - reverse the result - !true=false & !false=true

sizeif() - return the size of the datatype
sizeof(var_name)
while using sizeof() - it is bettet to use %lu - unsigned long int - since some times it may prone to error - so we use %lu - while working with sizeof()


bitwise operators
&  - 1 if both are same else 0
|  - 1 if one of them is 1 else 0
^  - 1 if both of them are opposite
>> - n/(2^(>>times)) - cut from the right side
2 - 10 
2>>1
10 -> leading zeroes are added and back are left -> 01
<< - n*(2^(>>times)) - add from right side
2>>1
10 - 100
tailing zeroes are added 



a b & | ^
0 0 0 0 0
0 1 0 1 1
1 0 0 1 1
1 1 1 1 0


comparison operators
used to compare value
returns true(1) or false(0)

here true = 1
     false = 0

     !true = false
     !false = true

>   compares two values greater than or not
<   less than 
!=  not equal to
<=  lte
>=  gte
==  equal to 



assignment operators
= -> used to assign the value
x+=5 => x=x+5 // it works a bit faster - called as operator name and assignment - addition assignment
x-=5
x*=5
x/=5
x%=5
x&=5
x|=5
x^=5
x>>=5
x<<=5


boolean

to use bool - we need to use stdbool.h header file 
bool a = false;
bool s = true;
bool a = 1;
bool s = 0;
when comparing values it returns boolean operator


conditional statements
we use this statements - when the condition is true - the block of code executes else it wont and goes to else block

conditions - are based on comparision operators - and based on that boolean value - the conditional statements are executed 
< > <= >= != ==

if  - to check for one condition 
if else - to check for one condition if it is false then the control moves to the else block of code
if else if .. else if else - to check multiple conditions
switch - to specify many alternative block of codes - instead of if ... else


if(){

}
...
else if(){

}
...
else{

}

switch(case){
    case val :
               break;
    case val :
               break;
    ...
    default : if no match  ;
}


short hand if : 
variable = (condition )? expressionTrue : expressionFalse;

Loops : 
if the condition is not met and not specified the loop will run infinite times
we can also nest loops one in another


it is used to iterate the flow of control of the program to occur for multiple times until specified condition is reached 
while loop
used when we doesnt know exactly how many iterations are happening 
the loop runs until the specified condition is true
while(condition){
    // block of code
    update - step count
}



for loop
it is used when we know how many times the loop is going to run
for(initialization  ; condition ; update){

}


do while loop - it is also like while loop but it executes for one time even if the condition is false
and then it executes based on the condition
do{
    // block of code
    // step count
}while(condition)

break - it is used to jump out of the loop when specific condition is met

continue - it is used to jump one of itereation in the loop and goes to the next iteration


Arrays 
It is homogeneous collection of elements where data is stored in contiguous memory locations
to define an array we need to have array size or we can give the array directly

int arr[] = { elements in the array };
int arr[size of the array];

to initalize the array with 0 :
int arr[10] = {0};

to access elements we use arr[element we need at specific index]
arr[0] , arr[1] ...
we can also change the values of the array by accessing
we can also loop through the array
we can also declare the elements of array directly by accessing the elements or when declaring the array


indexing starts from 0 till n-1

multidimensional Arrays
it is array of Arrays

2-d arrays :
int a[row_size][col_size] ={{},{}};
        col 1    col 2    ...    col n
row 1
row 2 
...
row n

like how we loop in arrays in the same way we loop through n-d arrays but we have to traverse through all the elements so we need to have n-loops

Strings : it is defined as character array 
char g[] = "hello"; // here the terminator is there by default by the c
char g[] = {'h' , 'e','l','l','o','\0'} -> it is another way of defining strings - here we need to use \0 to tell that it is the end of the string
\0 - it is defined as the terminator

we need to use the format specifier - %lu - for sizeof()

strings are represented by " ";
to print strings - we use the format specifier as - %s
like how we access the arrays in the same way we access the strings and we can alter it
we can also loop through the string like array

to include special characters in strings we use escape character - \
to include " ' - we use - \" \'
to include \ - \\

\n - next line
\t - tab space
\0 - null - terminator

string functions
to work with strings we need to use  header file - #include<string.h>
to get the lenght of the string - strlen(name_of_the_string)
to concat strings - strcat(str1,str2)
to copy a string - strcpy(str1,str2)
to compare strings - strcmp(str1,str2) - it compares and it gives the values  - 0 if strings are equal else it gives another values

to take input :
we use the format specifier of the data type used and the & - for storing the value in that particular address of the variable
strings - scanf() - for single word input
          fgets() - for line input
for single line input :
fgets(name,len,stdin)
scanf("%[^\n]s",s);

to get the address of the variable - we need to use & before the variable 
the format specifier to access the address is - %p
pointer - a pointer is a variable that stores the memory address of the another variable
to use pointer the syntax is int * ptr = &var_name -> it stores the address of var_name
to get the value at that pointer place - * before the pointer_name 

& - to get the address
* - to get the value at that particular address

we can declare pointers as
int* ptr
int *ptr

the array name by default contains the address of the 1st element of the array
we can store that in a pointer - int *ptr = arr;
we can travers the array by *(arr + i);
since *arr - gives the value at that particular address
as elements in the array are stored in continuous memory locations - we can traverse like *(arr + 1) -> for second element
or *(ptr + i)


functions
data_type of function(parameter){ // function declaration
    function body
    return statement based on type of function  // function definition
}

void myf(){ // function defintion
        // function body
}

myf(); // function call

we can send any number of arguments to the functions 
the name of the arguments that are sending in the function call and name of the parameters in the function declaration need not to be same

to send array as argument we need to use the parameter as - data_type arr[// use or not use -> size_of_array]

we can use return values based on the type of the function

a function consists of two parts 
function declaration - contains name of the function , return type and parameters
function definition - contains the body of the function 


Recursion - a function that calls itself

math functions in  c : we need to include #include<math.h>
ceil()
floor()
pow()
sqrt()
abs()
acos() - arc cosine - cos^-1
asin() - arc sin - sin^-1
atan() - arc tan - tan^-1
cbrt()
cos(x)
sin()
tan()
exp()


FILE HANDLING IN C :
FILE *fptr
fptr = fopen(file_name , mode)
mode :
r - read
w - write
a - append

to create a file 
FILE *fptr
fptr = fopen("filename.txt","w"); // or we can give the path where we need to create the file 
then we node to close the file - fclose(fptr)

to write some text into the file 
fprintf(fptr , "text_here")
based on mode - the fprintf function works

to read a file 
fopen("f_name" , "r")

to read the content of the file - use fgets()
fgets(name , size , fptr)

it is a good practice to check whether the file is empty or not
using the condition
if(fptr==null)then print(not able to open file)

to read from a file 
we need to store the data from the file that we get in a string so that we need to declare the string to store the variable
fgets(name , size , fptr)

Structure - also called as structs
struct NameOfTheStructure{
    members of the Structure
}; --> ends with semicolon

structure - it is used to group several related variables - each variable is member of the structure
by using structure we can create our own data type that consists of multiple data type

to access structure we need to create the variable of it - like how we use Integer

struct myStruct{
    int a;
    char b;
    char c[10];
    

}

int main(){
    // to access the structure
    struct mystruct s;
    //to use the structure :
    s.a = 10;
    s.b = 'a';
}


we cannot access strings directly from structures since since are not accessed directly so we need to make the replica of it and then we need to use
so while using strings we need to
use strcpy to make use of the string from strucutures like :
strcpy(s.c,"hello");

we can use by accessing each data type in the structure 
or 
we can use structures by creating a variable of it and then assigning the values based on the datatypes present in it
struct mystruct s = {10,'a',"hello"};

we can copy strucutres by 
struct mystruct s1,s2;
s1={10,'a',"hello"};
s2=s1;

if we want to change or modify we can use it by accessing the particular member of the structure

enums - used to represent a group of constant values
enum level{
    low,
    medium,
    high
};

to access the enum 
enum level l ;
to assign :
enum level l = medium; // IT SHOW THE LEVEL AS 0 1 2
IF WE GIVE THE VALUE THEN IT SHOWS THE THE VALUE THAT WE HAVE given





























