#include<bits/stdc++.h>
using namespace std;
/*
oops 
object oriented programming - working with objects contains data and objects
procedural programming is about writing functions 

oop is faster and easy
gives a clear structure
reusable applications

ex:
1)
class  - Fruit - Blueprint
Object - Apple , Banana , Mango ...
2)
Car
Volvo , Swift ...

A class is a blueprint for objects and an object is a instance of a class
when a instance is created they get all the variables and functionalities of the class

C++ - is a Object oriented programming language
everything in c++ is associated with classes and objects , along with attributes and methods

In real life - a car is object 
Attributes - Weight and color 
Methods - drive , brake

Attributes are nothing but variables 
Methods are nothing but Functions

Attributes and Methods are together called as Class Members

A class is a user-defined data type that we can use in our program 
It is a object Constructor 
It is a blue print for creating objects





*/
// creating a class
class Myclass{
    public: // Access specifier 
    // public - can be accessed from outside of the class
                
        int myNum; // int variable
        string myString; // string variable
    
};
/*


// class ends with ";"
int main(){
    Myclass myObj;
    myObj.myNum = 15;
    myObj.myString = "string";
    
    // we can create multiple objects using this class
    
    
    
}

Methods
/*

Methods 
    functions belong to that a class
    there are 2 ways to define functions that belongs to a class
    Inside the class
    Outside the class
    
    inside the method - we can give parameters that we have - where it can be any method (inside or outside)
    
*/

// Inside the class  and outside the class
class C{
    public :
        int v;
        void Inside_method(){
            cout<<"This is from Inside method"<<endl;
        }
        void Outside_method();
};
void C::Outside_method(){
    cout<<"This is from outside method"<<endl;
}
int main(){
    C o;
    o.v = 2;
    cout<<o.v<<endl;
    o.Inside_method();
    o.Outside_method();
}
/*
output:
2
This is from Inside method
This is from outside method
*/


/*

Constructor
It is a special method that is automatically called when an instance of a class is created
It has the same name of the class - and it is a method

**
It has the same name of the class and it is always public and it is called when instance of the class is created

It takes parameters just like functions which can be useful for setting initial values for attributes

It is used to initialize the values of attriubtes in the class

// we need to send the values of the attributes while creating the objects of a class to initialize the constructor

Just like functions we can also create constructor of a class out side the class

*/
class C{
    public:
    int a;
    int b;
    int c;
    C(int x , int y ,int z){
        cout<<"this is from constructor of calss c\n";
        a = x;
        b = y;
        c = z;
    }
};

int main(){
    cout<<"Hi! I am learning oops."<<"\n";
    C c(10,20,30);// creating a object with class C;
    cout<<c.a<<endl;//accessing the attributes of a class instance
    cout<<c.b<<endl;
    cout<<c.c<<endl;
    
}



/*

Constructor
It is a special method that is automatically called when an instance of a class is created
It has the same name of the class - and it is a method

**
It has the same name of the class and it is always public and it is called when instance of the class is created

It takes parameters just like functions which can be useful for setting initial values for attributes

It is used to initialize the values of attriubtes in the class

// we need to send the values of the attributes while creating the objects of a class to initialize the constructor

Just like functions we can also create constructor of a class out side the class

We can create a constructor of a class using the "::" operator outside the class

Just like how we declare the function inside the class we also need to declare the constructor and then it can be defined outside the class



*/
class C{
    public:
    int a;
    int b;
    int c;
    C(int x , int y , int z);// constructor declaration and it does not have any return type
    
  
};
C::C(int x , int y , int z){ // constructor initialization
    a = x;
    b = y;
    c = z;
}
int main(){
    cout<<"Hi! I am learning oops."<<"\n";
    C c(10,20,30);// creating a object with class C;
    cout<<c.a<<endl;//accessing the attributes of a class instance
    cout<<c.b<<endl;
    cout<<c.c<<endl;
    
}

/_____________________________________________________________________/



/*
Access specifiers
ex : public
It specifies how  the members of a class (attributes) can be accessed 
public means the members of a class can be accessed 
private means it cannot be accessed from outside the class
protected means it can be accessed from outside the class only from the inherited classes 


****
By default all the members of a class is private if you dont specific any access specifier
****

BY DEFAULT IT IS PRIVATE
*/
class C{
    public:
        int x;
    // it can be access from outside the class
    private:
        int y;
    // it cannot be accessed from outside the class
    
    
        
    
  
};
int main(){
    cout<<"Hi! I am learning oops."<<"\n";
    C c;
    c.x = 5;// public - access specifier
    c.y = 2;// gives error here
    
    
}


/_____________________________________________________________________/
#include<bits/stdc++.h>
using namespace std;
/*
Encapsulation is the process of encapsulating the data like encapsulating in a capsule tablet

using this we can make sure that sensitive data is hidden from users and to achieve this you must declare attributes as private 

To read or modify the values of a private member we can use get and set methods publicly

set - setters are used to set the values
get - getters are used to get the values




*/

class Car{
    private:
        int t;
    public:
        //setter 
        void set(int v){
            t = v;
        }
        void get(){
           cout<<t<<endl; 
        }
};
/*
Here type is the restricted access as it uses private access specifier
using set() - we can set the values
      get() - we can get the values using this -- it returns the values of the private attribute
       
       Using Encapsulation we can increase security
       As it ensures control over the data because others can change the part of the code without affecting other parts
       
       like we cannot change the salary of a person which is private in a company to others
       and marks of a students
       
       hiding data hidden from the users
       
*/

int main(){
    Car c;
    c.set(10);
    c.get();
    
}
/___________________________________________________________________________________/

/*
    Inheritance
    we can inherit / send the members of one class to another using inheritance
    In this we have -
        Parent - The class being inherited
        Child  - The class that is inherits another class
        
        to inherit a class we use the ":" symbol
        
        we use inheritance to reuse members of a class in antoher class
        
        There are different types of inheritance 
        
        
*/
class Vehicle{
    public:
        string brand = "Ford";
        void honk(){
            cout<<"Tuut , tuut!\n";
        }
};
class Car : public Vehicle{
    public :
        string model = "Mustang";
};
int main(){
    Car myCar;
    myCar.honk();
    cout<<myCar.model;
    /*
    output:
        Tuut , tuut!
        Mustang
    */
}


/_____________________________________________________________________/
#include<bits/stdc++.h>
using namespace std;
/*
    Inheritance
    we can inherit / send the members of one class to another using inheritance
    In this we have -
        Parent - The class being inherited
        Child  - The class that is inherits another class
        
        to inherit a class we use the ":" symbol
        
        we use inheritance to reuse members of a class in antoher class
        
        There are different types of inheritance 
        1)Multilevel inheritance :
             Grand Father
                  |
                Father
                  |
                 Son
            a class can also be derived from another class which is derived from another class
            
        2)
        
        we can inherit from one class to another class using ":" operator
        
        
        
*/
/*
while inheriting classes we need to make sure about the access speicifiers
as  the class has private as by default access specifier

*/
class G{
    public:
    G(){
        cout<<"from G\n";
    }
};
class F:public G{
    public:
    F(){
        cout<<"from F\n";
    }
};
class S:public F{
    public:
    S(){
        cout<<"from S\n";
    }
};
int main(){
    S s;
    
}
/_____________________________________________________________________/

#include<bits/stdc++.h>
using namespace std;
/*
    Inheritance
    we can inherit / send the members of one class to another using inheritance
    In this we have -
        Parent - The class being inherited
        Child  - The class that is inherits another class
        
        to inherit a class we use the ":" symbol
        
        we use inheritance to reuse members of a class in antoher class
        
        There are different types of inheritance 
        1)Multilevel inheritance :
             Grand Father
                  |
                Father
                  |
                 Son
            a class can also be derived from another class which is derived from another class
            
        2)Multiple inheritance
        A class can also be derived using more than one class 
        using a comma-seperated list
        
        
        we can inherit from one class to another class using ":" operator
        
        
        
*/
/*
while inheriting classes we need to make sure about the access speicifiers we need  to use like child class : access_specifier parent class
ex : class F:public class G{};
as the class has private as by default access specifier - we need to change it to public

*/
class G{
    public:
        G(){
            cout<<"from G\n";
        }
};
class F{
    public:
        F(){
            cout<<"from f\n";
        }
};
// multiple inheritance
// it calls the constructor based on the order we give the multiple classes in the list of multiple inheritance classes

/*
make sure the syntax:
class N{    
    public: // check the specifier
        int n;
}
and 
for inheritance
class n : public N { // here we can use multiple classes based on the type of inheritance that is required in using
    public :
        ...
}
*/
class S : public F,public G{
    public:
        S(){
            cout<<"from s\n";
        }
};
int main(){
    S s;
}

/_____________________________________________________________________/

#include<bits/stdc++.h>
using namespace std;
// we use protected - access specifier when we want to use the members of a class only from the child class that inherits it
// we use protected keyword 
// protected:
//
class E{
    protected :
        int s;
};
class P:public E{
    public :
        void set(int x){
            s = x;
        }
        void get(){
            cout<<s<<endl;
        }
};
int main(){
    P p;
    p.set(1);
    p.get();
}
/_____________________________________________________________________/
#include<bits/stdc++.h>
using namespace std;
// polymorphism
   /*
   poly means many
   morph means forms
   
   using inheritance we can use members of a class from another class that inherits it 
   using inheritance we can redefine the methods with the same name
   like animal - sound
        dog - sound
        cat - sound
        ...
   */
// using polymorphism we can perform method overriding
class Animal{
    public :
        void sound(){
            cout<<"some sound \n";
        }
};
class Dog : public Animal{
    public :
    void sound(){
        cout<<"Bow \n";
    }
};
//y different animals
int main(){
    Dog d;
    d.sound();
}
/_____________________________________________________________________/
#include<string.h>
#include<iostream>
#include<fstream>// for working with files
#include<math.h>
#include<cmath>
using namespace std;
int main(){
    // ofstream - creates and writes files
    // ifstream - reads from files
    // fstream - combination of ofstream and ifstream
    
    // when a file is opened we need to close it
    /*
    ofstream myFile("path");
    myFile<<"hello";
    myFile.close();
    */
    // when a file is opened 
    /*
    ifstram f('path');
    while(getline(f,text)){
    cout<<text<<"\n";
    }
    f.close();
    */
}
/_____________________________________________________________________/

Exceptions
// the risky code is written in try block
// to handle it we use in catch
// if we dont know the type of exception we can use ... inside the catch(__here__)
// throw - it is used to throw the error and it is handled by the catch block

try{

    throw 505;
}
catch(...){

}