STL - Standard Template Library
#include<bits/stdc++.h>
using namespace std;

Algorithms
Containers
Functions
Iterators

Cpp
 
STL - Declarations , assigning values , inbuilt functions and methods , CRUD , combinations 

basic inbuilt methods - sort , reverse , sum , find , count

pair
vector
list
stack
queue
deque
priority_queue
Set
Multi_set
unordered_set
map
unordered_map

Containers - Data Structures
Algorithms - Operate on Containers
Iterators  - To access elements of Containers
Functions  - Used with Algorithms

Containers
     Sequence Containers (ordered by insertion)
        vector	Dynamic array
        deque	Double-ended queue
        list	Doubly linked list
        forward_list	Singly linked list
        array	Fixed-size array
        string	Sequence of characters
     Associative Containers (sorted by key)
        set	Stores unique keys
        multiset	Stores duplicate keys
        map	Key-value, unique keys
        multimap	Key-value, duplicate keys
     Unordered Associative Containers (hash-based, unsorted)
        Container	Description
        unordered_set	Unique keys, fast lookup
        unordered_multiset	Duplicate keys
        unordered_map	Key-value, unique keys
        unordered_multimap	Key-value, duplicate keys
     Container Adapters (restricted interface)
        Container	Description
        stack	LIFO
        queue	FIFO
        priority_queue	Max/Min heap
Functions
        c.insert(value);       // insert element
        c.erase(it or key);    // erase element
        c.begin(), c.end();    // iterator access
        c.size(), c.empty();   // size check
        c.clear();             // remove all
        c.find(key);           // search
        c.count(key);          // count occurrences
        c.lower_bound(key);    // >= key
        c.upper_bound(key);    // > key
        c.equal_range(key);    // returns [lower, upper)

STL Algorithms (from <algorithm>)
üîç Searching	find, binary_search, lower_bound, upper_bound
üîÅ Modifying	copy, swap, fill, replace, transform
üìä Sorting	sort, stable_sort, partial_sort, nth_element
‚úÖ Checking	all_of, any_of, none_of, count, count_if
üßº Removing	remove, remove_if, unique, erase
üí° Others	reverse, rotate, next_permutation, prev_permutation, accumulate (from <numeric>)

Iterators
begin(), end()	All containers
rbegin(), rend()	Reverse iteration
cbegin(), cend()	Constant iterators
advance(it, n)	Move iterator n steps
distance(start, end)	Number of steps between


Summary Table of Key Functions
Insert	insert, emplace
Search	find, count, binary_search
Sort	sort, stable_sort
Min/Max	min_element, max_element
Remove	remove, erase, unique
Accumulate	accumulate, partial_sum




Containers

    pair , vector , list , set , multiset , unordered_set , stack , queue , deque , priority_queue , map , unordered_map , multimap

    Declaration
    Data types
    Combinations
    Functions
    Iterators

    Pair
        Declaration
            pair<int,int> p = {1,2} or pair<int,int>p = make_pair(1,2);
            pair<int,string>p;
            pair<int,vector<int>>p;

        Accessing Elements :
            p.first
            p.second

    Vectors
        Declaration
            vector<int>v;
            vector<int>v(5);//create a vector of 5 elements with value as 0 or garbage value
            vector<int>v={1,2,3,4,5};
            vector<pair<int,int>>v;//cin>>v[i].first>>v[i].second;

        Accessing Elements
            v[i];
            v.at(i);

        Functions
            v.push_back(val); or v.emplace_back(val); // adds element to the vector
            v.pop_back(); // removes the last element from the vector
            v.size(); // returns the size of the vector
            erase(v.begin()+3,v.end()-1);
            v.insert(v.begin()+1,81);
            swap(v1,v2);//swaps two Vectors


        Iterator
            begin(v) or v.begin() - points to the address of the first element in the vector
            end(v) or v.end() - points to the address next to the last element in the vector
            rbegin(v) or v.rbegin() - points to the last element in the vector
            rend(v) or v.rend() - points to the address before the first element
        
        
    
    Lists
        Declaration

    Stack
        Declaration:
            stack<int>s; //stack<data_type>name;
            stack<string>s;
            stack<vector<int>>s;
            stack<char>s;

        Operations
            push
            pop
            top
            isempty
        Accessing Elements:

            
    Queue
        Operations
            push
            pop
            
    Deque
    Priority Queue (Heap)
    
    Sets
    Multiset
    unordered_set

    Map
    Multimap
    Unordered_map




Functions and Algorithms

sort
accumulate
find
erase
count
reverse
comparator
next_permuntation
previous_permutation
max_element
pow


